install.packages("caret")
library(caret)
install.packages("dplyr")
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case, p =0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~. , data = training, method = "rpart")
library(rattle)
modFit$finalModel
fancyRartPlot(modFit$finalModel)
library(rattle)
fancyRartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
data(segmentationOriginal)
inTrain <- createDataPartition(segmentationOriginal$Case, p =0.6, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~. , data = training, method = "rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
rm(list=ls())
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive])
str(olive)
View(olive)
inTrain <- createDataPartition(Area ~ . , p = 0.7, ,data = olive list = FALSE)
inTrain <- createDataPartition(Area ~ . , p = 0.7, ,data = olive, list = FALSE)
View(olive)
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
tr <- train(Area ~ ., mehtod ="rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
pred <- predict(tr, newdata)
pred
library(pgmm)
data(olive)
olive = olive[,-1]
tr <- train(Area ~ ., mehtod ="rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
pred <- predict(tr, newdata)
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
### no.4
library(ElemStatLearn)
rm(list=ls())
data(SAheart)
SAheart
View(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages(randomForest)
install.packages("randomForest")
library("randomForest")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test
vowel.train
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rf <- train(y~., data=vowel.train, method ="rf" )
boot <- train(y~., data =vowel.train, method="gbm")
library(caret)
pred.rf <- predict(rf, vowel.test)
set.seed(33833)
rf <- train(y~., data=vowel.train, method ="rf" )
boot <- train(y~., data =vowel.train, method="gbm")
con.rf <- confusionMatrix(pred.rf, vowel.test$y)
pred.rf <- predict(rf, vowel.test)
pred.boot <- predict(boot, vowel.test)
pred.rf
con.rf <- confusionMatrix(pred.rf, vowel.test$y)
con.rf
con.boot <- confusionMatrix(pred.boot, vowel.test$y)
con.boot
set.seed(33833)
rf <- train(y~., data =vowel.train, method="rf")
boot <- train(y~., data= vowel.train,method"gbm")
pred.rf <- predict(rf, vowel.test)
pred.boot <- predict(boot, vowel.test)
set.seed(33833)
rf <- train(y~., data =vowel.train, method="rf")
boot <- train(y~., data= vowel.train,method="gbm")
pred.rf <- predict(rf, vowel.test)
pred.boot <- predict(boot, vowel.test)
con.rf <- confusionMatrix(pred.rf, vowel.test$y)
con.boot <- confusionMatrix(pred.boot, vowel.test$y)
con.rf
con.boot
con.boot$overall
?train
predDF <- data.frame(pred_rf, pred.boot, y = vowel.test$y)
predDF <- data.frame(pred.rf, pred.boot, y = vowel.test$y)
pred.rf
rm(list=ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
getwd()
####No.4
library(lubridate) # For year() function below
dat = read.csv("./practical machine learning/gaData.csv")
dat = read.csv("./coursera/practical machine learning/gaData.csv")
rm(list=ls())
dat
dat = read.csv("./coursera/practical machine learning/gaData.csv")
View(dat)
class(dat$date)
training = dat[year(dat$date) < 2012,]
View(training)
str(dat)
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
install.packages("tinytex")
pdflatex
library(tinytex)
pdflatex
pdflatex
q()
library(caret)
library(randomForest)
library(randomForest)
train <- read.csv("pml-training.csv", header =T, sep=",", na.strings=c("NA",""))
test <- read.csv("pml-testing.csv", header =T, sep=",", na.strings=c("NA",""))
dim(train)
dim(test)
train$classe = as.factor(train$classe)
table(train$class)
na.apply <- sapply(1:dim(train)[2], function(x) {sum(is.na(train[, x]))})
na.apply
value.col = which(na.apply == 0)
train <- train[, value.col]
test <- test[, value.col]
dim(train)
dim(test)
train <- train[, 8:60]
test <-  test[, 8:59]
dim(train);  dim(test)
inTrain = createDataPartition(train$classe, p=0.6, list=FALSE)
tr <- train[inTrain,]
val <- train[inTrain,]
err.rate <- c()
for (i in 6 : 9){
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
a<-list()
a
a<-c(a,7)
a
a<-c(a,8)
a
err.rate <- c()
rf.fit <- list()
for (i in 6 : 9){
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
rf.fit[[2]]
err.rate <- c()
for (i in 6 : 9){
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
rm(rf.fit)
err.rate <- c()
rf.fit <- list()
for (i in 6 : 9){
set.seed(1)
rf.fit <- c(rf.fit, randomForest(classe ~., data = tr, mtry =i))
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
rf.fit[[2]]
rf.fit <- randomForest(classe ~., data = tr, mtry =7, importance =T)
rf.fit
pred <- predict(rf.fit, val)
confusionMatrix(pred, val$classe)
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =7, importance =T)
rf.fit
pred <- predict(rf.fit, newdata = val)
confusionMatrix(pred, val$classe)
varImpPlot(rf.fit)
varImpPlot(rf.fit, sort = T)
varImpPlot(rf.fit, sort = T, type = 1)
rm(list=ls())
library(randomForest)
train <- read.csv("pml-training.csv", header =T, sep=",", na.strings=c("NA",""))
test <- read.csv("pml-testing.csv", header =T, sep=",", na.strings=c("NA",""))
dim(train)
dim(test)
train$classe = as.factor(train$classe)
table(train$class)
na.apply <- sapply(1:dim(train)[2], function(x) {sum(is.na(train[, x]))})
na.apply
value.col = which(na.apply == 0)
train <- train[, value.col]
test <- test[, value.col]
dim(train)
dim(test)
train <- train[, 8:60]
test <-  test[, 8:59]
dim(train);  dim(test)
inTrain = createDataPartition(train$classe, p=0.6, list=FALSE)
tr <- train[inTrain,]
val <- train[inTrain,]
err.rate <- c()
for (i in 6 : 9){
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =7, importance =T)
rf.fit
pred <- predict(rf.fit, newdata = val)
confusionMatrix(pred, val$classe)
pred
rf.fit
pred <- predict(rf.fit, newdata=test)
pred
pred <- predict(rf.fit, newdata=test)
pred
library(randomForest)
train <- read.csv("pml-training.csv", header =T, sep=",", na.strings=c("NA",""))
test <- read.csv("pml-testing.csv", header =T, sep=",", na.strings=c("NA",""))
dim(train)
dim(test)
train$classe = as.factor(train$classe)
table(train$class)
na.apply <- sapply(1:dim(train)[2], function(x) {sum(is.na(train[, x]))})
na.apply
value.col = which(na.apply == 0)
train <- train[, value.col]
test <- test[, value.col]
dim(train)
dim(test)
train <- train[, 8:60]
test <-  test[, 8:59]
dim(train);  dim(test)
inTrain = createDataPartition(train$classe, p=0.6, list=FALSE)
library(caret)
library(randomForest)
inTrain = createDataPartition(train$classe, p=0.6, list=FALSE)
tr <- train[inTrain,]
val <- train[inTrain,]
err.rate <- c()
for (i in 6 : 9){
set.seed(1)
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
err.rate <- c()
set.seed(123)
for (i in 6 : 9){
rf.fit <- randomForest(classe ~., data = tr, mtry =i)
err.rate <- c(err.rate, mean(rf.fit$err.rate[,1]))
}
err.rate
set.seed(123)
rf.fit <- randomForest(classe ~., data = tr, mtry =6, importance =T)
rf.fit
rf.fit$oob.times
rf.fit$err.rate
pred <- predict(rf.fit, newdata = val)
confusionMatrix(pred, val$classe)
varImpPlot(rf.fit, sort = T, type = 1)
pred <- predict(rf.fit, newdata=test)
pred
unzip(zipfile = "activity.zip")
getwd()
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
getwd()
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
library(ggplot2)
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
library(ggplot2)
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
dim(data)
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
library(ggplot2)
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
dim(data)
colnames(data)
is.na$date
is.na(data$date)
sum(is.na(data$date))
sum(is.na(data$interval))
sum(is.na(data$steps))
sum(is.na(data$steps); sum(is.na(data$date); sum(is.na(data$intervals)
sum(is.na(data$steps); sum(is.na(data$date); sum(is.na(data$intervals);
sum(is.na(data$steps)); sum(is.na(data$date)); sum(is.na(data$intervals));
prep.data <- data[complete.cases(data),]
sum(is.na(data$steps))
sum(is.na(data$date))
sum(is.na(data$intervals))
prep.data <- data[complete.cases(data),]
sum(is.na(data$intervals))
str(data)
sum(is.na(data$steps))
sum(is.na(data$date))
sum(is.na(data$interval))
prep.data <- data[complete.cases(data),]
a <- tapply(data$steps, data$date, FUN = sum, na.rm = TRUE)
a
steps.day <- sapply(split(data$stpes,data$date),sum)
steps.day <- sapply(split(data$steps,data$date),sum)
steps.day
steps.day <- sapply(split(data$steps,data$date),sum, na.rm = TRUE)
stpes.day
steps.day
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
ggplot(stpes.day) + geom_histogram(color="black", fill="lightblue", binwidth=0.5)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
ggplot(steps.day) + geom_histogram(color="black", fill="lightblue", binwidth=0.5)
str(stpes.day)
str(steps.day)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
geom_histogram(steps.day, aes(y=..density..) )
class(steps.day)
str(steps.day)
steps.day
row.names(stpes.day)
row.names(steps.day)
rownames(steps.day)
coefficients(steps.day)
unname(steps.day)
name(steps.day)
dimnames(steps.day)
names(steps.day)
steps.day <- data.frame(date=names(stpes.day), stpes=steps.day)
steps.day <- data.frame(date=names(steps.day), stpes=steps.day)
View(steps.day)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), stpes=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = date, y = steps) + geom_histogram(steps, aes(y=..density..) )
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), stpes=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = date, y = steps)) + geom_histogram(steps, aes(y=..density..) )
steps.day
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = date, y = steps)) + geom_histogram(steps, aes(y=..density..) )
steps.day
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = date, y = steps)) + geom_histogram(steps)
str(steps.day)
View(steps.day)
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
library(ggplot2)
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
dim(data)
colnames(data)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram()
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 1000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 2000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 4000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 1000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 5000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 500)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 1000)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 500)
median.steps <- median(steps$steps)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 500)
median.steps <- median(steps.day$steps)
mean.steps <- mean(steps.day$steps)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 500)
median(steps.day$steps)
mean(steps.day$steps)
median(steps.day$steps)
mean(steps.day$steps)
str(steps.day)
View(prep.data)
View(steps.day)
rm(list=ls())
setwd("D:/01 Minki Philosophy/10 Data Science/08 github/coursera/5. reproducible research/RepData_PeerAssessment1")
library(ggplot2)
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
dim(data)
colnames(data)
steps.day <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.day <- data.frame(date=names(steps.day), steps=steps.day, row.names =NULL)
ggplot(steps.day, aes(x = steps)) + geom_histogram(binwidth = 500)
median(steps.day$steps)
mean(steps.day$steps)
steps.interval <- sapply(split(data$steps, data$interval, mean, na.rm=TRUE))
steps.interval <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE))
steps.interval <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.interval
steps.sum <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.sum <- data.frame(date=names(steps.sum), steps=steps.sum, row.names =NULL)
ggplot(steps.sum, aes(x = steps)) + geom_histogram(binwidth = 500)
steps.daysum <- sapply(split(data$steps,data$date), sum, na.rm = TRUE)
steps.daysum <- data.frame(date=names(steps.daysum), steps=steps.daysum, row.names =NULL)
ggplot(steps.daysum, aes(x = steps)) + geom_histogram(binwidth = 500)
median(steps.daysum$steps)
mean(steps.daysum$steps)
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=names(steps.intavg), steps=steps.intavg, row.names =NULL)
#plot(names(avg), avg, xlab="5-min interval", type="l", ylab="Average no. of steps")
steps.intavg
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=names(steps.intavg), steps=steps.intavg, row.names =NULL)
ggplot(steps.intavg, aes(x = interval, y = steps) + geom_line()
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=names(steps.intavg), steps=steps.intavg, row.names =NULL)
ggplot(steps.intavg, aes(x = interval, y = steps)) + geom_line()
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=names(steps.intavg), steps=steps.intavg, row.names =NULL)
ggplot(steps.intavg, aes(x = interval, y = steps)) + geom_point()
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=names(steps.intavg), steps=steps.intavg, row.names =NULL)
ggplot(data = steps.intavg, aes(x = interval, y = steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
ggplot(data = steps.intavg, aes(x = interval, y = steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
steps.intavg
str(steps.intavg)
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=as.numeric(names(steps.intavg)), steps=steps.intavg, row.names =NULL)
ggplot(data = steps.intavg, aes(x = interval, y = steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
str(steps.intavg)
head(steps.intavg)
steps.intavg <- sapply(split(data$steps, data$interval), mean, na.rm=TRUE)
steps.intavg <- data.frame(interval=as.numeric(names(steps.intavg)), steps=steps.intavg, row.names =NULL)
ggplot(data = steps.intavg, aes(x = interval, y = steps)) + geom_line()
max(steps.intavg$steps)
max.value <- max(steps.intavg$steps)
max.interval <- [which.max(steps.intavg$steps),1]
max.value <- max(steps.intavg$steps)
max.interval <- stpes.intavg[which.max(steps.intavg$steps),1]
max.value <- max(steps.intavg$steps)
max.interval <- steps.intavg[which.max(steps.intavg$steps),1]
max.value <- max(steps.intavg$steps)
max.value
steps.intavg[which.max(steps.intavg$steps),1]
